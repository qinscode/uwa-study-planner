name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm  # Install pnpm globally

      - name: Install dependencies
        run: pnpm install --frozen-lockfile  # Install project dependencies using pnpm

      - name: Run lint
        run: pnpm lint  # Run the linting process using pnpm

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3  # Set up QEMU for multi-platform builds

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3  # Set up Docker Buildx for building multi-platform images

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}  # Log in to the container registry

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long  # Extract metadata for Docker image tags

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .  # Use the current directory as build context
          push: true  # Push the image to the registry
          platforms: linux/arm64  # Build for the arm64 platform
          tags: ${{ steps.meta.outputs.tags }}  # Use extracted tags for the image
          labels: ${{ steps.meta.outputs.labels }}  # Use extracted labels for the image
          cache-from: type=gha  # Use GitHub Actions cache for faster builds
          cache-to: type=gha,mode=max  # Cache the build artifacts

  deploy:
    needs: build-and-push  # Deploy after the build-and-push job
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Run deployment only on the main branch

    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            # Pull the latest Docker image for the correct platform version
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
            
            # Stop and clean up any old containers
            docker stop study-planner || true
            docker rm study-planner || true
            docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main || true
            
            # Run the new container, specifying the platform
            docker run -d \
              --platform linux/arm64 \
              --name study-planner \
              --restart unless-stopped \
              -p 127.0.0.1:3031:3031 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main